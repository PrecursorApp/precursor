version: 2
jobs:
  build:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.1-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "project.clj" }}-1
            - dependency-cache-{{ checksum "package-lock.json" }}-1
      - run:
          command: lein deps
      - save_cache:
          key: dependency-cache-{{ checksum "project.clj" }}-1
          paths:
            - ~/.m2
      - run:
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}-1
          paths:
            - node_modules
      - run:
          command: echo ${CIRCLE_SHA1} > resources/version
      - run:
          command: lein uberjar
      - run:
          command: git submodule update --init
      - run:
          command: lein run -m pc.tasks/compile-less
      - run:
          command: lein cljsbuild once production
      - run:
          command: du -h resources/public/cljs/production/frontend.js resources/public/css/app.css
      - run:
          command: lein test
      - persist_to_workspace:
          root: ./
          paths:
            - src
            - script
            - resources
            - target
            - project.clj

  deploy:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.1-node
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "project.clj" }}-1
      - run:
          command: lein run -m pc.assets/upload-manifest ${CIRCLE_SHA1}
      - run:
          command: lein run -m pc.deploy/upload-slug ${CIRCLE_SHA1}
      - run:
          command: cp script/s3-dl.sh ~/bin
      - run:
          command: PATH=$PATH:~/bin AWS_ACCESS_KEY_ID=$DEPLOY_S3_ID AWS_SECRET_ACCESS_KEY=$DEPLOY_S3_SECRET ./script/download-latest-jar.sh > pc-standalone.jar
      - run:
          command: java -cp pc-standalone.jar clojure.main --main pc.version | grep ${CIRCLE_SHA1}

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
